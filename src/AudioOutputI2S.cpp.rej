--- src/AudioOutputI2S.cpp
+++ src/AudioOutputI2S.cpp
@@ -121,16 +123,28 @@ bool AudioOutputI2S::SetRate(int hz)
   if (i2sOn)
   {
   #ifdef ESP32
-      i2s_set_sample_rates((i2s_port_t)portNo, AdjustI2SRate(hz));
+      hz = AdjustI2SRate(hz);
+      i2s_set_sample_rates((i2s_port_t)portNo, hz);
   #elif defined(ESP8266)
       i2s_set_rate(AdjustI2SRate(hz));
-  #elif defined(ARDUINO_ARCH_RP2040)
+#elif defined(ARDUINO_ARCH_RP2040)
       I2S.setFrequency(hz);
   #endif
   }
+  //NOTE: with mp3 decoder, rate is set after few sampes are passed to output already. We restart ramp each time.
+  updateRampSamples();
   return true;
 }
 
+void AudioOutputI2S::updateRampSamples()
+{
+    int hz = this->hertz;
+  #ifdef ESP32
+    hz = AdjustI2SRate(hz);
+  #endif
+    this->startRampSamples = this->endRampSamples = this->endRampSamplesTotal = this->startRampSamplesTotal = ((unsigned long)hz) * rampMs / 1000;
+}
+
 bool AudioOutputI2S::SetBitsPerSample(int bits)
 {
   if ( (bits != 16) && (bits != 8) ) return false;
@@ -307,13 +312,51 @@ bool AudioOutputI2S::ConsumeSample(int16_t sample[2])
     i2s_write((i2s_port_t)portNo, (const char*)&s32, sizeof(uint32_t), &i2s_bytes_written, 0);
     return i2s_bytes_written;
   #elif defined(ESP8266)
-    uint32_t s32 = ((Amplify(ms[RIGHTCHANNEL])) << 16) | (Amplify(ms[LEFTCHANNEL]) & 0xffff);
+    uint32_t s32 = (ms[RIGHTCHANNEL] << 16) | (ms[LEFTCHANNEL] & 0xffff);
     return i2s_write_sample_nb(s32); // If we can't store it, return false.  OTW true
   #elif defined(ARDUINO_ARCH_RP2040)
     return !!I2S.write((void*)ms, 4);
   #endif
 }
 
+bool AudioOutputI2S::ConsumeSample(int16_t sample[2])
+{
+  //return if we haven't called ::begin yet
+  if (!i2sOn)
+    return false;
+
+  int16_t ms[2];
+  ms[0] = sample[0];
+  ms[1] = sample[1];
+  MakeSampleStereo16( ms );
+
+  if (this->mono) 
+  {
+    // Average the two samples and overwrite
+    int32_t ttl = ms[LEFTCHANNEL] + ms[RIGHTCHANNEL];
+    ms[LEFTCHANNEL] = ms[RIGHTCHANNEL] = (ttl>>1) & 0xffff;
+  }
+
+  ms[LEFTCHANNEL] = Amplify(ms[LEFTCHANNEL]);
+  ms[RIGHTCHANNEL] = Amplify(ms[RIGHTCHANNEL]);
+
+  if ( startRampSamples > 0 )
+  {
+    //lerp between -32768 and ms[]
+      
+    uint16_t t = ((((int32_t)startRampSamples) << 8) / startRampSamplesTotal); //256...0
+    int16_t v = -(t << 7);  //256 -> -32768
+    t = 256 - t;
+
+    ms[0] = v + ((ms[0] >> 8) * t);
+    ms[1] = v + ((ms[1] >> 8) * t);
+    
+    startRampSamples--;
+  }
+
+  return writeSample(ms);
+}
+
 void AudioOutputI2S::flush()
 {
   #ifdef ESP32
--- src/AudioOutputI2S.cpp
+++ src/AudioOutputI2S.cpp
@@ -140,7 +140,7 @@ void AudioOutputI2S::updateRampSamples()
   #ifdef ESP32
     hz = AdjustI2SRate(hz);
   #endif
-    this->startRampSamples = this->endRampSamples = this->endRampSamplesTotal = this->startRampSamplesTotal = ((unsigned long)hz) * rampMs / 1000;
+    this->startRampSamples = this->endRampSamples = this->endRampSamplesTotal = this->startRampSamplesTotal = ((uint32_t)hz) * rampMs / 1000;
 }
 
 bool AudioOutputI2S::SetBitsPerSample(int bits)
